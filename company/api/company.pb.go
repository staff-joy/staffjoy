// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: company.proto

package main

import (
	context "context"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                 string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name                 string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Archived             bool   `protobuf:"varint,3,opt,name=archived,proto3" json:"archived,omitempty"`
	DefaultTimezone      string `protobuf:"bytes,4,opt,name=default_timezone,json=defaultTimezone,proto3" json:"default_timezone,omitempty"`
	DefaultDayWeekStarts string `protobuf:"bytes,5,opt,name=default_day_week_starts,json=defaultDayWeekStarts,proto3" json:"default_day_week_starts,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{0}
}

func (x *Company) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Company) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *Company) GetDefaultTimezone() string {
	if x != nil {
		return x.DefaultTimezone
	}
	return ""
}

func (x *Company) GetDefaultDayWeekStarts() string {
	if x != nil {
		return x.DefaultDayWeekStarts
	}
	return ""
}

type CompanyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*Company `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies,omitempty"`
	Limit     int32      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"` // mirrors request
	Offset    int32      `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *CompanyList) Reset() {
	*x = CompanyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyList) ProtoMessage() {}

func (x *CompanyList) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyList.ProtoReflect.Descriptor instead.
func (*CompanyList) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{1}
}

func (x *CompanyList) GetCompanies() []*Company {
	if x != nil {
		return x.Companies
	}
	return nil
}

func (x *CompanyList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CompanyList) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type CompanyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *CompanyListRequest) Reset() {
	*x = CompanyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyListRequest) ProtoMessage() {}

func (x *CompanyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyListRequest.ProtoReflect.Descriptor instead.
func (*CompanyListRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CompanyListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type CreateCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultTimezone      string `protobuf:"bytes,2,opt,name=default_timezone,json=defaultTimezone,proto3" json:"default_timezone,omitempty"`
	DefaultDayWeekStarts string `protobuf:"bytes,3,opt,name=default_day_week_starts,json=defaultDayWeekStarts,proto3" json:"default_day_week_starts,omitempty"`
}

func (x *CreateCompanyRequest) Reset() {
	*x = CreateCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyRequest) ProtoMessage() {}

func (x *CreateCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyRequest.ProtoReflect.Descriptor instead.
func (*CreateCompanyRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCompanyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCompanyRequest) GetDefaultTimezone() string {
	if x != nil {
		return x.DefaultTimezone
	}
	return ""
}

func (x *CreateCompanyRequest) GetDefaultDayWeekStarts() string {
	if x != nil {
		return x.DefaultDayWeekStarts
	}
	return ""
}

type GetCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetCompanyRequest) Reset() {
	*x = GetCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyRequest) ProtoMessage() {}

func (x *GetCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{4}
}

func (x *GetCompanyRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CompanyUuid   string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Archived      bool   `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	Timezone      string `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
	DayWeekStarts string `protobuf:"bytes,6,opt,name=day_week_starts,json=dayWeekStarts,proto3" json:"day_week_starts,omitempty"`
	Color         string `protobuf:"bytes,7,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{5}
}

func (x *Team) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Team) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *Team) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Team) GetDayWeekStarts() string {
	if x != nil {
		return x.DayWeekStarts
	}
	return ""
}

func (x *Team) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type TeamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *TeamList) Reset() {
	*x = TeamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamList) ProtoMessage() {}

func (x *TeamList) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamList.ProtoReflect.Descriptor instead.
func (*TeamList) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{6}
}

func (x *TeamList) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type TeamListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (x *TeamListRequest) Reset() {
	*x = TeamListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamListRequest) ProtoMessage() {}

func (x *TeamListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamListRequest.ProtoReflect.Descriptor instead.
func (*TeamListRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{7}
}

func (x *TeamListRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

type CreateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid   string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Timezone      string `protobuf:"bytes,3,opt,name=timezone,proto3" json:"timezone,omitempty"`
	DayWeekStarts string `protobuf:"bytes,4,opt,name=day_week_starts,json=dayWeekStarts,proto3" json:"day_week_starts,omitempty"`
	Color         string `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *CreateTeamRequest) Reset() {
	*x = CreateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamRequest) ProtoMessage() {}

func (x *CreateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamRequest.ProtoReflect.Descriptor instead.
func (*CreateTeamRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTeamRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *CreateTeamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTeamRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *CreateTeamRequest) GetDayWeekStarts() string {
	if x != nil {
		return x.DayWeekStarts
	}
	return ""
}

func (x *CreateTeamRequest) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type GetTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Uuid        string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetTeamRequest) Reset() {
	*x = GetTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamRequest) ProtoMessage() {}

func (x *GetTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamRequest.ProtoReflect.Descriptor instead.
func (*GetTeamRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{9}
}

func (x *GetTeamRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *GetTeamRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Archived    bool   `protobuf:"varint,5,opt,name=archived,proto3" json:"archived,omitempty"`
	Color       string `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{10}
}

func (x *Job) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Job) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *Job) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *Job) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type JobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *JobList) Reset() {
	*x = JobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobList) ProtoMessage() {}

func (x *JobList) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobList.ProtoReflect.Descriptor instead.
func (*JobList) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{11}
}

func (x *JobList) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type JobListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (x *JobListRequest) Reset() {
	*x = JobListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobListRequest) ProtoMessage() {}

func (x *JobListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobListRequest.ProtoReflect.Descriptor instead.
func (*JobListRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{12}
}

func (x *JobListRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *JobListRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

type CreateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Color       string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *CreateJobRequest) Reset() {
	*x = CreateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobRequest) ProtoMessage() {}

func (x *CreateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobRequest.ProtoReflect.Descriptor instead.
func (*CreateJobRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{13}
}

func (x *CreateJobRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *CreateJobRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *CreateJobRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateJobRequest) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{14}
}

func (x *GetJobRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetJobRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *GetJobRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

type Shift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CompanyUuid string                 `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string                 `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Start       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	Stop        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop,proto3" json:"stop,omitempty"`
	UserUuid    string                 `protobuf:"bytes,6,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid     string                 `protobuf:"bytes,7,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	Published   bool                   `protobuf:"varint,8,opt,name=published,proto3" json:"published,omitempty"`
}

func (x *Shift) Reset() {
	*x = Shift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shift) ProtoMessage() {}

func (x *Shift) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shift.ProtoReflect.Descriptor instead.
func (*Shift) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{15}
}

func (x *Shift) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Shift) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *Shift) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *Shift) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Shift) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *Shift) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *Shift) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

func (x *Shift) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

type ShiftList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shifts           []*Shift               `protobuf:"bytes,1,rep,name=shifts,proto3" json:"shifts,omitempty"`
	ShiftStartAfter  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=shift_start_after,json=shiftStartAfter,proto3" json:"shift_start_after,omitempty"`
	ShiftStartBefore *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=shift_start_before,json=shiftStartBefore,proto3" json:"shift_start_before,omitempty"`
}

func (x *ShiftList) Reset() {
	*x = ShiftList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftList) ProtoMessage() {}

func (x *ShiftList) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftList.ProtoReflect.Descriptor instead.
func (*ShiftList) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{16}
}

func (x *ShiftList) GetShifts() []*Shift {
	if x != nil {
		return x.Shifts
	}
	return nil
}

func (x *ShiftList) GetShiftStartAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.ShiftStartAfter
	}
	return nil
}

func (x *ShiftList) GetShiftStartBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.ShiftStartBefore
	}
	return nil
}

type ShiftListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid      string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid         string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid          string `protobuf:"bytes,4,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	ShiftStartAfter  string `protobuf:"bytes,5,opt,name=shift_start_after,json=shiftStartAfter,proto3" json:"shift_start_after,omitempty"`
	ShiftStartBefore string `protobuf:"bytes,6,opt,name=shift_start_before,json=shiftStartBefore,proto3" json:"shift_start_before,omitempty"`
}

func (x *ShiftListRequest) Reset() {
	*x = ShiftListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShiftListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShiftListRequest) ProtoMessage() {}

func (x *ShiftListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShiftListRequest.ProtoReflect.Descriptor instead.
func (*ShiftListRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{17}
}

func (x *ShiftListRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *ShiftListRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *ShiftListRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ShiftListRequest) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

func (x *ShiftListRequest) GetShiftStartAfter() string {
	if x != nil {
		return x.ShiftStartAfter
	}
	return ""
}

func (x *ShiftListRequest) GetShiftStartBefore() string {
	if x != nil {
		return x.ShiftStartBefore
	}
	return ""
}

type WorkerShiftListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid      string                 `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid         string                 `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	WorkerUuid       string                 `protobuf:"bytes,3,opt,name=worker_uuid,json=workerUuid,proto3" json:"worker_uuid,omitempty"`
	ShiftStartAfter  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=shift_start_after,json=shiftStartAfter,proto3" json:"shift_start_after,omitempty"`
	ShiftStartBefore *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=shift_start_before,json=shiftStartBefore,proto3" json:"shift_start_before,omitempty"`
}

func (x *WorkerShiftListRequest) Reset() {
	*x = WorkerShiftListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerShiftListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerShiftListRequest) ProtoMessage() {}

func (x *WorkerShiftListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerShiftListRequest.ProtoReflect.Descriptor instead.
func (*WorkerShiftListRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{18}
}

func (x *WorkerShiftListRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *WorkerShiftListRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *WorkerShiftListRequest) GetWorkerUuid() string {
	if x != nil {
		return x.WorkerUuid
	}
	return ""
}

func (x *WorkerShiftListRequest) GetShiftStartAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.ShiftStartAfter
	}
	return nil
}

func (x *WorkerShiftListRequest) GetShiftStartBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.ShiftStartBefore
	}
	return nil
}

type BulkPublishShiftsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid      string                 `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid         string                 `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	UserUuid         string                 `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid          string                 `protobuf:"bytes,4,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	ShiftStartAfter  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=shift_start_after,json=shiftStartAfter,proto3" json:"shift_start_after,omitempty"`
	ShiftStartBefore *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=shift_start_before,json=shiftStartBefore,proto3" json:"shift_start_before,omitempty"`
	Published        bool                   `protobuf:"varint,7,opt,name=published,proto3" json:"published,omitempty"`
}

func (x *BulkPublishShiftsRequest) Reset() {
	*x = BulkPublishShiftsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPublishShiftsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPublishShiftsRequest) ProtoMessage() {}

func (x *BulkPublishShiftsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPublishShiftsRequest.ProtoReflect.Descriptor instead.
func (*BulkPublishShiftsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{19}
}

func (x *BulkPublishShiftsRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *BulkPublishShiftsRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *BulkPublishShiftsRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *BulkPublishShiftsRequest) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

func (x *BulkPublishShiftsRequest) GetShiftStartAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.ShiftStartAfter
	}
	return nil
}

func (x *BulkPublishShiftsRequest) GetShiftStartBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.ShiftStartBefore
	}
	return nil
}

func (x *BulkPublishShiftsRequest) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

type CreateShiftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string                 `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string                 `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Start       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	Stop        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop,proto3" json:"stop,omitempty"`
	UserUuid    string                 `protobuf:"bytes,6,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	JobUuid     string                 `protobuf:"bytes,7,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	Published   bool                   `protobuf:"varint,8,opt,name=published,proto3" json:"published,omitempty"`
}

func (x *CreateShiftRequest) Reset() {
	*x = CreateShiftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShiftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShiftRequest) ProtoMessage() {}

func (x *CreateShiftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShiftRequest.ProtoReflect.Descriptor instead.
func (*CreateShiftRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{20}
}

func (x *CreateShiftRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *CreateShiftRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *CreateShiftRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CreateShiftRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *CreateShiftRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateShiftRequest) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

func (x *CreateShiftRequest) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

type GetShiftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,3,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (x *GetShiftRequest) Reset() {
	*x = GetShiftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShiftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShiftRequest) ProtoMessage() {}

func (x *GetShiftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShiftRequest.ProtoReflect.Descriptor instead.
func (*GetShiftRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{21}
}

func (x *GetShiftRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetShiftRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *GetShiftRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

// directory
type DirectoryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	InternalId  string `protobuf:"bytes,2,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	CompanyUuid string `protobuf:"bytes,3,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	// coming from account
	Name               string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Email              string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	ConfirmedAndActive bool   `protobuf:"varint,7,opt,name=confirmed_and_active,json=confirmedAndActive,proto3" json:"confirmed_and_active,omitempty"`
	Phonenumber        string `protobuf:"bytes,8,opt,name=phonenumber,proto3" json:"phonenumber,omitempty"`
	PhotoUrl           string `protobuf:"bytes,9,opt,name=photo_url,json=photoUrl,proto3" json:"photo_url,omitempty"`
}

func (x *DirectoryEntry) Reset() {
	*x = DirectoryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryEntry) ProtoMessage() {}

func (x *DirectoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryEntry.ProtoReflect.Descriptor instead.
func (*DirectoryEntry) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{22}
}

func (x *DirectoryEntry) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DirectoryEntry) GetInternalId() string {
	if x != nil {
		return x.InternalId
	}
	return ""
}

func (x *DirectoryEntry) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *DirectoryEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DirectoryEntry) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DirectoryEntry) GetConfirmedAndActive() bool {
	if x != nil {
		return x.ConfirmedAndActive
	}
	return false
}

func (x *DirectoryEntry) GetPhonenumber() string {
	if x != nil {
		return x.Phonenumber
	}
	return ""
}

func (x *DirectoryEntry) GetPhotoUrl() string {
	if x != nil {
		return x.PhotoUrl
	}
	return ""
}

type NewDirectoryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phonenumber string `protobuf:"bytes,4,opt,name=phonenumber,proto3" json:"phonenumber,omitempty"`
	InternalId  string `protobuf:"bytes,5,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
}

func (x *NewDirectoryEntry) Reset() {
	*x = NewDirectoryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDirectoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDirectoryEntry) ProtoMessage() {}

func (x *NewDirectoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDirectoryEntry.ProtoReflect.Descriptor instead.
func (*NewDirectoryEntry) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{23}
}

func (x *NewDirectoryEntry) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *NewDirectoryEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewDirectoryEntry) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *NewDirectoryEntry) GetPhonenumber() string {
	if x != nil {
		return x.Phonenumber
	}
	return ""
}

func (x *NewDirectoryEntry) GetInternalId() string {
	if x != nil {
		return x.InternalId
	}
	return ""
}

type DirectoryEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	UserUuid    string `protobuf:"bytes,2,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *DirectoryEntryRequest) Reset() {
	*x = DirectoryEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryEntryRequest) ProtoMessage() {}

func (x *DirectoryEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryEntryRequest.ProtoReflect.Descriptor instead.
func (*DirectoryEntryRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{24}
}

func (x *DirectoryEntryRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *DirectoryEntryRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type DirectoryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*DirectoryEntry `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Limit    int32             `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32             `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *DirectoryList) Reset() {
	*x = DirectoryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryList) ProtoMessage() {}

func (x *DirectoryList) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryList.ProtoReflect.Descriptor instead.
func (*DirectoryList) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{25}
}

func (x *DirectoryList) GetAccounts() []*DirectoryEntry {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *DirectoryList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DirectoryList) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type DirectoryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Limit       int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *DirectoryListRequest) Reset() {
	*x = DirectoryListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectoryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryListRequest) ProtoMessage() {}

func (x *DirectoryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryListRequest.ProtoReflect.Descriptor instead.
func (*DirectoryListRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{26}
}

func (x *DirectoryListRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *DirectoryListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DirectoryListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// admins
type AdminListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
}

func (x *AdminListRequest) Reset() {
	*x = AdminListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListRequest) ProtoMessage() {}

func (x *AdminListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListRequest.ProtoReflect.Descriptor instead.
func (*AdminListRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{27}
}

func (x *AdminListRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

type Admins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string            `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	Admins      []*DirectoryEntry `protobuf:"bytes,2,rep,name=admins,proto3" json:"admins,omitempty"`
}

func (x *Admins) Reset() {
	*x = Admins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Admins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Admins) ProtoMessage() {}

func (x *Admins) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Admins.ProtoReflect.Descriptor instead.
func (*Admins) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{28}
}

func (x *Admins) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *Admins) GetAdmins() []*DirectoryEntry {
	if x != nil {
		return x.Admins
	}
	return nil
}

type AdminOfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *AdminOfRequest) Reset() {
	*x = AdminOfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminOfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminOfRequest) ProtoMessage() {}

func (x *AdminOfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminOfRequest.ProtoReflect.Descriptor instead.
func (*AdminOfRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{29}
}

func (x *AdminOfRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type AdminOfList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid  string     `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	Companies []*Company `protobuf:"bytes,2,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *AdminOfList) Reset() {
	*x = AdminOfList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminOfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminOfList) ProtoMessage() {}

func (x *AdminOfList) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminOfList.ProtoReflect.Descriptor instead.
func (*AdminOfList) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{30}
}

func (x *AdminOfList) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AdminOfList) GetCompanies() []*Company {
	if x != nil {
		return x.Companies
	}
	return nil
}

// workers
type WorkerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
}

func (x *WorkerListRequest) Reset() {
	*x = WorkerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerListRequest) ProtoMessage() {}

func (x *WorkerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerListRequest.ProtoReflect.Descriptor instead.
func (*WorkerListRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{31}
}

func (x *WorkerListRequest) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *WorkerListRequest) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

type Workers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string            `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string            `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	Workers     []*DirectoryEntry `protobuf:"bytes,3,rep,name=workers,proto3" json:"workers,omitempty"`
}

func (x *Workers) Reset() {
	*x = Workers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workers) ProtoMessage() {}

func (x *Workers) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workers.ProtoReflect.Descriptor instead.
func (*Workers) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{32}
}

func (x *Workers) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *Workers) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *Workers) GetWorkers() []*DirectoryEntry {
	if x != nil {
		return x.Workers
	}
	return nil
}

type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid,proto3" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid,proto3" json:"team_uuid,omitempty"`
	UserUuid    string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{33}
}

func (x *Worker) GetCompanyUuid() string {
	if x != nil {
		return x.CompanyUuid
	}
	return ""
}

func (x *Worker) GetTeamUuid() string {
	if x != nil {
		return x.TeamUuid
	}
	return ""
}

func (x *Worker) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type WorkerOfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *WorkerOfRequest) Reset() {
	*x = WorkerOfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerOfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerOfRequest) ProtoMessage() {}

func (x *WorkerOfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerOfRequest.ProtoReflect.Descriptor instead.
func (*WorkerOfRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{34}
}

func (x *WorkerOfRequest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type WorkerOfList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid string  `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	Teams    []*Team `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *WorkerOfList) Reset() {
	*x = WorkerOfList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerOfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerOfList) ProtoMessage() {}

func (x *WorkerOfList) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerOfList.ProtoReflect.Descriptor instead.
func (*WorkerOfList) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{35}
}

func (x *WorkerOfList) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *WorkerOfList) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type Association struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *DirectoryEntry `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Teams   []*Team         `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
	Admin   bool            `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *Association) Reset() {
	*x = Association{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Association) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Association) ProtoMessage() {}

func (x *Association) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Association.ProtoReflect.Descriptor instead.
func (*Association) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{36}
}

func (x *Association) GetAccount() *DirectoryEntry {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Association) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *Association) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

type AssociationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*Association `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Limit    int32          `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32          `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *AssociationList) Reset() {
	*x = AssociationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociationList) ProtoMessage() {}

func (x *AssociationList) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociationList.ProtoReflect.Descriptor instead.
func (*AssociationList) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{37}
}

func (x *AssociationList) GetAccounts() []*Association {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *AssociationList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AssociationList) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TimeZoneList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timezones []string `protobuf:"bytes,1,rep,name=timezones,proto3" json:"timezones,omitempty"`
}

func (x *TimeZoneList) Reset() {
	*x = TimeZoneList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeZoneList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeZoneList) ProtoMessage() {}

func (x *TimeZoneList) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeZoneList.ProtoReflect.Descriptor instead.
func (*TimeZoneList) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{38}
}

func (x *TimeZoneList) GetTimezones() []string {
	if x != nil {
		return x.Timezones
	}
	return nil
}

type TimeZoneListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimeZoneListRequest) Reset() {
	*x = TimeZoneListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeZoneListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeZoneListRequest) ProtoMessage() {}

func (x *TimeZoneListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeZoneListRequest.ProtoReflect.Descriptor instead.
func (*TimeZoneListRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{39}
}

type ScheduledPerWeek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Week  string `protobuf:"bytes,1,opt,name=week,proto3" json:"week,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ScheduledPerWeek) Reset() {
	*x = ScheduledPerWeek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledPerWeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledPerWeek) ProtoMessage() {}

func (x *ScheduledPerWeek) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledPerWeek.ProtoReflect.Descriptor instead.
func (*ScheduledPerWeek) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{40}
}

func (x *ScheduledPerWeek) GetWeek() string {
	if x != nil {
		return x.Week
	}
	return ""
}

func (x *ScheduledPerWeek) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GrowthGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeopleScheduledPerWeek map[string]int32 `protobuf:"bytes,1,rep,name=people_scheduled_per_week,json=peopleScheduledPerWeek,proto3" json:"people_scheduled_per_week,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PeopleOnShifts         int32            `protobuf:"varint,2,opt,name=people_on_shifts,json=peopleOnShifts,proto3" json:"people_on_shifts,omitempty"`
}

func (x *GrowthGraphResponse) Reset() {
	*x = GrowthGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthGraphResponse) ProtoMessage() {}

func (x *GrowthGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthGraphResponse.ProtoReflect.Descriptor instead.
func (*GrowthGraphResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{41}
}

func (x *GrowthGraphResponse) GetPeopleScheduledPerWeek() map[string]int32 {
	if x != nil {
		return x.PeopleScheduledPerWeek
	}
	return nil
}

func (x *GrowthGraphResponse) GetPeopleOnShifts() int32 {
	if x != nil {
		return x.PeopleOnShifts
	}
	return 0
}

type GrowthGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GrowthGraphRequest) Reset() {
	*x = GrowthGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthGraphRequest) ProtoMessage() {}

func (x *GrowthGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthGraphRequest.ProtoReflect.Descriptor instead.
func (*GrowthGraphRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{42}
}

var File_company_proto protoreflect.FileDescriptor

var file_company_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xf2, 0xde, 0x1f, 0x09, 0x64, 0x62, 0x3a, 0x22,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xf2, 0xde, 0x1f, 0x09, 0x64,
	0x62, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x11, 0xf2, 0xde, 0x1f, 0x0d, 0x64, 0x62, 0x3a, 0x22, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x22, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xf2, 0xde, 0x1f, 0x15, 0x64, 0x62, 0x3a,
	0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x22, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x57, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xf2, 0xde, 0x1f, 0x1c, 0x64, 0x62, 0x3a, 0x22, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x22, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x61, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x22, 0x7a, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x42, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8c, 0x01, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61,
	0x79, 0x57, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0xcc, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xf2, 0xde, 0x1f,
	0x09, 0x64, 0x62, 0x3a, 0x22, 0x75, 0x75, 0x69, 0x64, 0x22, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xf2, 0xde, 0x1f, 0x11, 0x64, 0x62, 0x3a, 0x22,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xf2, 0xde, 0x1f, 0x09, 0x64, 0x62,
	0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x11, 0xf2, 0xde, 0x1f, 0x0d, 0x64, 0x62, 0x3a, 0x22, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x22, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xf2, 0xde, 0x1f, 0x0d, 0x64, 0x62, 0x3a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x22, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x64,
	0x61, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x64, 0x62, 0x3a, 0x22, 0x64, 0x61,
	0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x22, 0x52, 0x0d,
	0x64, 0x61, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xf2, 0xde,
	0x1f, 0x0a, 0x64, 0x62, 0x3a, 0x22, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x22, 0x34, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x79,
	0x57, 0x65, 0x65, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x22, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x03, 0x4a, 0x6f,
	0x62, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xf2, 0xde, 0x1f, 0x09, 0x64, 0x62, 0x3a, 0x22, 0x75, 0x75, 0x69, 0x64, 0x22, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xde, 0x1f, 0x06,
	0x64, 0x62, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2, 0xde, 0x1f, 0x0e, 0x64, 0x62, 0x3a, 0x22,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xf2, 0xde, 0x1f, 0x09, 0x64, 0x62, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0xf2, 0xde, 0x1f, 0x0d, 0x64,
	0x62, 0x3a, 0x22, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x22, 0x52, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xf2, 0xde, 0x1f, 0x0a, 0x64, 0x62, 0x3a, 0x22, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x3a, 0x0a, 0x07,
	0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x50, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x22, 0xac, 0x03,
	0x0a, 0x05, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xf2, 0xde, 0x1f, 0x09, 0x64, 0x62, 0x3a, 0x22, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xf2, 0xde, 0x1f, 0x06, 0x64, 0x62, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2, 0xde,
	0x1f, 0x0e, 0x64, 0x62, 0x3a, 0x22, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16, 0xf2, 0xde, 0x1f, 0x0a, 0x64, 0x62, 0x3a, 0x22, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x22, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15,
	0xf2, 0xde, 0x1f, 0x09, 0x64, 0x62, 0x3a, 0x22, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x90, 0xdf, 0x1f,
	0x01, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xf2, 0xde, 0x1f, 0x0e, 0x64, 0x62, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xf2, 0xde, 0x1f, 0x0d, 0x64, 0x62, 0x3a, 0x22, 0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12, 0xf2,
	0xde, 0x1f, 0x0e, 0x64, 0x62, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x22, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0xe8, 0x01, 0x0a,
	0x09, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x73, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x90, 0xdf, 0x1f,
	0x01, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x9f,
	0x02, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x12,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x10,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x22, 0xd6, 0x02, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f,
	0x62, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f,
	0x62, 0x55, 0x75, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x90, 0xdf,
	0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x10, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x90, 0xdf, 0x1f,
	0x01, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x0e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55,
	0x72, 0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x15, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x14, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x35,
	0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x06, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x22, 0x2d, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x22, 0x69, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3d, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x53, 0x0a, 0x11,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69,
	0x64, 0x22, 0x8b, 0x01, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22,
	0x65, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4f, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x2c, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x10, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77,
	0x65, 0x65, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x13, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7c, 0x0a, 0x19, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x4f, 0x6e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x57,
	0x65, 0x65, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x98, 0x26, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x26,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f,
	0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f,
	0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x12, 0x66, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x1a, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22,
	0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f,
	0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x76,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f,
	0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x72, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x1a, 0x29, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x86, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x22, 0x2e,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38,
	0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a,
	0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x12,
	0x84, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a,
	0x6f, 0x62, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f,
	0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x12, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a, 0x6f, 0x62, 0x1a, 0x15, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4a,
	0x6f, 0x62, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x1a, 0x3a, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f,
	0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x28,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x42,
	0x75, 0x6c, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x73,
	0x12, 0x2a, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3a, 0x1a, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x2a, 0x3c, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x69, 0x66, 0x74, 0x22, 0x47, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x41, 0x1a, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4e, 0x65,
	0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a,
	0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x8f, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a,
	0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9a, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x1a,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12,
	0x88, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x27, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a,
	0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x27, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x7d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x20, 0x2e,
	0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22,
	0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x2a, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22,
	0x36, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x0b, 0x47, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6b, 0x70, 0x69, 0x73,
	0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x66, 0x12,
	0x21, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4f, 0x66, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x6a, 0x6f, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x66, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x17, 0x76, 0x32, 0x2e, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x6a, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0xe0, 0xe2, 0x1e, 0x01, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xd8, 0xe3, 0x1e, 0x00,
	0x90, 0xe3, 0x1e, 0x00, 0xd0, 0xe3, 0x1e, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_company_proto_rawDescOnce sync.Once
	file_company_proto_rawDescData = file_company_proto_rawDesc
)

func file_company_proto_rawDescGZIP() []byte {
	file_company_proto_rawDescOnce.Do(func() {
		file_company_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_proto_rawDescData)
	})
	return file_company_proto_rawDescData
}

var file_company_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_company_proto_goTypes = []interface{}{
	(*Company)(nil),                  // 0: staffjoy.company.Company
	(*CompanyList)(nil),              // 1: staffjoy.company.CompanyList
	(*CompanyListRequest)(nil),       // 2: staffjoy.company.CompanyListRequest
	(*CreateCompanyRequest)(nil),     // 3: staffjoy.company.CreateCompanyRequest
	(*GetCompanyRequest)(nil),        // 4: staffjoy.company.GetCompanyRequest
	(*Team)(nil),                     // 5: staffjoy.company.Team
	(*TeamList)(nil),                 // 6: staffjoy.company.TeamList
	(*TeamListRequest)(nil),          // 7: staffjoy.company.TeamListRequest
	(*CreateTeamRequest)(nil),        // 8: staffjoy.company.CreateTeamRequest
	(*GetTeamRequest)(nil),           // 9: staffjoy.company.GetTeamRequest
	(*Job)(nil),                      // 10: staffjoy.company.Job
	(*JobList)(nil),                  // 11: staffjoy.company.JobList
	(*JobListRequest)(nil),           // 12: staffjoy.company.JobListRequest
	(*CreateJobRequest)(nil),         // 13: staffjoy.company.CreateJobRequest
	(*GetJobRequest)(nil),            // 14: staffjoy.company.GetJobRequest
	(*Shift)(nil),                    // 15: staffjoy.company.Shift
	(*ShiftList)(nil),                // 16: staffjoy.company.ShiftList
	(*ShiftListRequest)(nil),         // 17: staffjoy.company.ShiftListRequest
	(*WorkerShiftListRequest)(nil),   // 18: staffjoy.company.WorkerShiftListRequest
	(*BulkPublishShiftsRequest)(nil), // 19: staffjoy.company.BulkPublishShiftsRequest
	(*CreateShiftRequest)(nil),       // 20: staffjoy.company.CreateShiftRequest
	(*GetShiftRequest)(nil),          // 21: staffjoy.company.GetShiftRequest
	(*DirectoryEntry)(nil),           // 22: staffjoy.company.DirectoryEntry
	(*NewDirectoryEntry)(nil),        // 23: staffjoy.company.NewDirectoryEntry
	(*DirectoryEntryRequest)(nil),    // 24: staffjoy.company.DirectoryEntryRequest
	(*DirectoryList)(nil),            // 25: staffjoy.company.DirectoryList
	(*DirectoryListRequest)(nil),     // 26: staffjoy.company.DirectoryListRequest
	(*AdminListRequest)(nil),         // 27: staffjoy.company.AdminListRequest
	(*Admins)(nil),                   // 28: staffjoy.company.Admins
	(*AdminOfRequest)(nil),           // 29: staffjoy.company.AdminOfRequest
	(*AdminOfList)(nil),              // 30: staffjoy.company.AdminOfList
	(*WorkerListRequest)(nil),        // 31: staffjoy.company.WorkerListRequest
	(*Workers)(nil),                  // 32: staffjoy.company.Workers
	(*Worker)(nil),                   // 33: staffjoy.company.Worker
	(*WorkerOfRequest)(nil),          // 34: staffjoy.company.WorkerOfRequest
	(*WorkerOfList)(nil),             // 35: staffjoy.company.WorkerOfList
	(*Association)(nil),              // 36: staffjoy.company.Association
	(*AssociationList)(nil),          // 37: staffjoy.company.AssociationList
	(*TimeZoneList)(nil),             // 38: staffjoy.company.TimeZoneList
	(*TimeZoneListRequest)(nil),      // 39: staffjoy.company.TimeZoneListRequest
	(*ScheduledPerWeek)(nil),         // 40: staffjoy.company.ScheduledPerWeek
	(*GrowthGraphResponse)(nil),      // 41: staffjoy.company.GrowthGraphResponse
	(*GrowthGraphRequest)(nil),       // 42: staffjoy.company.GrowthGraphRequest
	nil,                              // 43: staffjoy.company.GrowthGraphResponse.PeopleScheduledPerWeekEntry
	(*timestamppb.Timestamp)(nil),    // 44: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),            // 45: google.protobuf.Empty
}
var file_company_proto_depIdxs = []int32{
	0,  // 0: staffjoy.company.CompanyList.companies:type_name -> staffjoy.company.Company
	5,  // 1: staffjoy.company.TeamList.teams:type_name -> staffjoy.company.Team
	10, // 2: staffjoy.company.JobList.jobs:type_name -> staffjoy.company.Job
	44, // 3: staffjoy.company.Shift.start:type_name -> google.protobuf.Timestamp
	44, // 4: staffjoy.company.Shift.stop:type_name -> google.protobuf.Timestamp
	15, // 5: staffjoy.company.ShiftList.shifts:type_name -> staffjoy.company.Shift
	44, // 6: staffjoy.company.ShiftList.shift_start_after:type_name -> google.protobuf.Timestamp
	44, // 7: staffjoy.company.ShiftList.shift_start_before:type_name -> google.protobuf.Timestamp
	44, // 8: staffjoy.company.WorkerShiftListRequest.shift_start_after:type_name -> google.protobuf.Timestamp
	44, // 9: staffjoy.company.WorkerShiftListRequest.shift_start_before:type_name -> google.protobuf.Timestamp
	44, // 10: staffjoy.company.BulkPublishShiftsRequest.shift_start_after:type_name -> google.protobuf.Timestamp
	44, // 11: staffjoy.company.BulkPublishShiftsRequest.shift_start_before:type_name -> google.protobuf.Timestamp
	44, // 12: staffjoy.company.CreateShiftRequest.start:type_name -> google.protobuf.Timestamp
	44, // 13: staffjoy.company.CreateShiftRequest.stop:type_name -> google.protobuf.Timestamp
	22, // 14: staffjoy.company.DirectoryList.accounts:type_name -> staffjoy.company.DirectoryEntry
	22, // 15: staffjoy.company.Admins.admins:type_name -> staffjoy.company.DirectoryEntry
	0,  // 16: staffjoy.company.AdminOfList.companies:type_name -> staffjoy.company.Company
	22, // 17: staffjoy.company.Workers.workers:type_name -> staffjoy.company.DirectoryEntry
	5,  // 18: staffjoy.company.WorkerOfList.teams:type_name -> staffjoy.company.Team
	22, // 19: staffjoy.company.Association.account:type_name -> staffjoy.company.DirectoryEntry
	5,  // 20: staffjoy.company.Association.teams:type_name -> staffjoy.company.Team
	36, // 21: staffjoy.company.AssociationList.accounts:type_name -> staffjoy.company.Association
	43, // 22: staffjoy.company.GrowthGraphResponse.people_scheduled_per_week:type_name -> staffjoy.company.GrowthGraphResponse.PeopleScheduledPerWeekEntry
	3,  // 23: staffjoy.company.CompanyService.CreateCompany:input_type -> staffjoy.company.CreateCompanyRequest
	2,  // 24: staffjoy.company.CompanyService.ListCompanies:input_type -> staffjoy.company.CompanyListRequest
	4,  // 25: staffjoy.company.CompanyService.GetCompany:input_type -> staffjoy.company.GetCompanyRequest
	0,  // 26: staffjoy.company.CompanyService.UpdateCompany:input_type -> staffjoy.company.Company
	8,  // 27: staffjoy.company.CompanyService.CreateTeam:input_type -> staffjoy.company.CreateTeamRequest
	7,  // 28: staffjoy.company.CompanyService.ListTeams:input_type -> staffjoy.company.TeamListRequest
	9,  // 29: staffjoy.company.CompanyService.GetTeam:input_type -> staffjoy.company.GetTeamRequest
	5,  // 30: staffjoy.company.CompanyService.UpdateTeam:input_type -> staffjoy.company.Team
	33, // 31: staffjoy.company.CompanyService.GetWorkerTeamInfo:input_type -> staffjoy.company.Worker
	13, // 32: staffjoy.company.CompanyService.CreateJob:input_type -> staffjoy.company.CreateJobRequest
	12, // 33: staffjoy.company.CompanyService.ListJobs:input_type -> staffjoy.company.JobListRequest
	14, // 34: staffjoy.company.CompanyService.GetJob:input_type -> staffjoy.company.GetJobRequest
	10, // 35: staffjoy.company.CompanyService.UpdateJob:input_type -> staffjoy.company.Job
	20, // 36: staffjoy.company.CompanyService.CreateShift:input_type -> staffjoy.company.CreateShiftRequest
	17, // 37: staffjoy.company.CompanyService.ListShifts:input_type -> staffjoy.company.ShiftListRequest
	18, // 38: staffjoy.company.CompanyService.ListWorkerShifts:input_type -> staffjoy.company.WorkerShiftListRequest
	19, // 39: staffjoy.company.CompanyService.BulkPublishShifts:input_type -> staffjoy.company.BulkPublishShiftsRequest
	21, // 40: staffjoy.company.CompanyService.GetShift:input_type -> staffjoy.company.GetShiftRequest
	21, // 41: staffjoy.company.CompanyService.DeleteShift:input_type -> staffjoy.company.GetShiftRequest
	15, // 42: staffjoy.company.CompanyService.UpdateShift:input_type -> staffjoy.company.Shift
	23, // 43: staffjoy.company.CompanyService.CreateDirectory:input_type -> staffjoy.company.NewDirectoryEntry
	26, // 44: staffjoy.company.CompanyService.Directory:input_type -> staffjoy.company.DirectoryListRequest
	26, // 45: staffjoy.company.CompanyService.GetAssociations:input_type -> staffjoy.company.DirectoryListRequest
	24, // 46: staffjoy.company.CompanyService.GetDirectoryEntry:input_type -> staffjoy.company.DirectoryEntryRequest
	22, // 47: staffjoy.company.CompanyService.UpdateDirectoryEntry:input_type -> staffjoy.company.DirectoryEntry
	27, // 48: staffjoy.company.CompanyService.ListAdmins:input_type -> staffjoy.company.AdminListRequest
	24, // 49: staffjoy.company.CompanyService.CreateAdmin:input_type -> staffjoy.company.DirectoryEntryRequest
	24, // 50: staffjoy.company.CompanyService.GetAdmin:input_type -> staffjoy.company.DirectoryEntryRequest
	24, // 51: staffjoy.company.CompanyService.DeleteAdmin:input_type -> staffjoy.company.DirectoryEntryRequest
	31, // 52: staffjoy.company.CompanyService.ListWorkers:input_type -> staffjoy.company.WorkerListRequest
	33, // 53: staffjoy.company.CompanyService.GetWorker:input_type -> staffjoy.company.Worker
	33, // 54: staffjoy.company.CompanyService.DeleteWorker:input_type -> staffjoy.company.Worker
	33, // 55: staffjoy.company.CompanyService.CreateWorker:input_type -> staffjoy.company.Worker
	39, // 56: staffjoy.company.CompanyService.ListTimeZones:input_type -> staffjoy.company.TimeZoneListRequest
	42, // 57: staffjoy.company.CompanyService.GrowthGraph:input_type -> staffjoy.company.GrowthGraphRequest
	34, // 58: staffjoy.company.CompanyService.GetWorkerOf:input_type -> staffjoy.company.WorkerOfRequest
	29, // 59: staffjoy.company.CompanyService.GetAdminOf:input_type -> staffjoy.company.AdminOfRequest
	0,  // 60: staffjoy.company.CompanyService.CreateCompany:output_type -> staffjoy.company.Company
	1,  // 61: staffjoy.company.CompanyService.ListCompanies:output_type -> staffjoy.company.CompanyList
	0,  // 62: staffjoy.company.CompanyService.GetCompany:output_type -> staffjoy.company.Company
	0,  // 63: staffjoy.company.CompanyService.UpdateCompany:output_type -> staffjoy.company.Company
	5,  // 64: staffjoy.company.CompanyService.CreateTeam:output_type -> staffjoy.company.Team
	6,  // 65: staffjoy.company.CompanyService.ListTeams:output_type -> staffjoy.company.TeamList
	5,  // 66: staffjoy.company.CompanyService.GetTeam:output_type -> staffjoy.company.Team
	5,  // 67: staffjoy.company.CompanyService.UpdateTeam:output_type -> staffjoy.company.Team
	33, // 68: staffjoy.company.CompanyService.GetWorkerTeamInfo:output_type -> staffjoy.company.Worker
	10, // 69: staffjoy.company.CompanyService.CreateJob:output_type -> staffjoy.company.Job
	11, // 70: staffjoy.company.CompanyService.ListJobs:output_type -> staffjoy.company.JobList
	10, // 71: staffjoy.company.CompanyService.GetJob:output_type -> staffjoy.company.Job
	10, // 72: staffjoy.company.CompanyService.UpdateJob:output_type -> staffjoy.company.Job
	15, // 73: staffjoy.company.CompanyService.CreateShift:output_type -> staffjoy.company.Shift
	16, // 74: staffjoy.company.CompanyService.ListShifts:output_type -> staffjoy.company.ShiftList
	16, // 75: staffjoy.company.CompanyService.ListWorkerShifts:output_type -> staffjoy.company.ShiftList
	16, // 76: staffjoy.company.CompanyService.BulkPublishShifts:output_type -> staffjoy.company.ShiftList
	15, // 77: staffjoy.company.CompanyService.GetShift:output_type -> staffjoy.company.Shift
	45, // 78: staffjoy.company.CompanyService.DeleteShift:output_type -> google.protobuf.Empty
	15, // 79: staffjoy.company.CompanyService.UpdateShift:output_type -> staffjoy.company.Shift
	22, // 80: staffjoy.company.CompanyService.CreateDirectory:output_type -> staffjoy.company.DirectoryEntry
	25, // 81: staffjoy.company.CompanyService.Directory:output_type -> staffjoy.company.DirectoryList
	37, // 82: staffjoy.company.CompanyService.GetAssociations:output_type -> staffjoy.company.AssociationList
	22, // 83: staffjoy.company.CompanyService.GetDirectoryEntry:output_type -> staffjoy.company.DirectoryEntry
	22, // 84: staffjoy.company.CompanyService.UpdateDirectoryEntry:output_type -> staffjoy.company.DirectoryEntry
	28, // 85: staffjoy.company.CompanyService.ListAdmins:output_type -> staffjoy.company.Admins
	22, // 86: staffjoy.company.CompanyService.CreateAdmin:output_type -> staffjoy.company.DirectoryEntry
	22, // 87: staffjoy.company.CompanyService.GetAdmin:output_type -> staffjoy.company.DirectoryEntry
	45, // 88: staffjoy.company.CompanyService.DeleteAdmin:output_type -> google.protobuf.Empty
	32, // 89: staffjoy.company.CompanyService.ListWorkers:output_type -> staffjoy.company.Workers
	22, // 90: staffjoy.company.CompanyService.GetWorker:output_type -> staffjoy.company.DirectoryEntry
	45, // 91: staffjoy.company.CompanyService.DeleteWorker:output_type -> google.protobuf.Empty
	22, // 92: staffjoy.company.CompanyService.CreateWorker:output_type -> staffjoy.company.DirectoryEntry
	38, // 93: staffjoy.company.CompanyService.ListTimeZones:output_type -> staffjoy.company.TimeZoneList
	41, // 94: staffjoy.company.CompanyService.GrowthGraph:output_type -> staffjoy.company.GrowthGraphResponse
	35, // 95: staffjoy.company.CompanyService.GetWorkerOf:output_type -> staffjoy.company.WorkerOfList
	30, // 96: staffjoy.company.CompanyService.GetAdminOf:output_type -> staffjoy.company.AdminOfList
	60, // [60:97] is the sub-list for method output_type
	23, // [23:60] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_company_proto_init() }
func file_company_proto_init() {
	if File_company_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_company_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShiftListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerShiftListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPublishShiftsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShiftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShiftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDirectoryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectoryListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Admins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminOfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminOfList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerOfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerOfList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Association); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeZoneList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeZoneListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledPerWeek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_company_proto_goTypes,
		DependencyIndexes: file_company_proto_depIdxs,
		MessageInfos:      file_company_proto_msgTypes,
	}.Build()
	File_company_proto = out.File
	file_company_proto_rawDesc = nil
	file_company_proto_goTypes = nil
	file_company_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyServiceClient interface {
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	ListCompanies(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyList, error)
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error)
	// teams
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error)
	ListTeams(ctx context.Context, in *TeamListRequest, opts ...grpc.CallOption) (*TeamList, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*Team, error)
	UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	GetWorkerTeamInfo(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error)
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobList, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	UpdateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*Shift, error)
	ListShifts(ctx context.Context, in *ShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error)
	ListWorkerShifts(ctx context.Context, in *WorkerShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error)
	BulkPublishShifts(ctx context.Context, in *BulkPublishShiftsRequest, opts ...grpc.CallOption) (*ShiftList, error)
	GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*Shift, error)
	DeleteShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateShift(ctx context.Context, in *Shift, opts ...grpc.CallOption) (*Shift, error)
	// Directory
	CreateDirectory(ctx context.Context, in *NewDirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error)
	Directory(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*DirectoryList, error)
	GetAssociations(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*AssociationList, error)
	GetDirectoryEntry(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	UpdateDirectoryEntry(ctx context.Context, in *DirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error)
	// Admins
	ListAdmins(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*Admins, error)
	CreateAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	GetAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	DeleteAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Workers
	ListWorkers(ctx context.Context, in *WorkerListRequest, opts ...grpc.CallOption) (*Workers, error)
	GetWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error)
	DeleteWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error)
	// timezones
	ListTimeZones(ctx context.Context, in *TimeZoneListRequest, opts ...grpc.CallOption) (*TimeZoneList, error)
	// growth graph
	GrowthGraph(ctx context.Context, in *GrowthGraphRequest, opts ...grpc.CallOption) (*GrowthGraphResponse, error)
	GetWorkerOf(ctx context.Context, in *WorkerOfRequest, opts ...grpc.CallOption) (*WorkerOfList, error)
	GetAdminOf(ctx context.Context, in *AdminOfRequest, opts ...grpc.CallOption) (*AdminOfList, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListCompanies(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyList, error) {
	out := new(CompanyList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListTeams(ctx context.Context, in *TeamListRequest, opts ...grpc.CallOption) (*TeamList, error) {
	out := new(TeamList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerTeamInfo(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerTeamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListShifts(ctx context.Context, in *ShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListShifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListWorkerShifts(ctx context.Context, in *WorkerShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListWorkerShifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) BulkPublishShifts(ctx context.Context, in *BulkPublishShiftsRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/BulkPublishShifts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateShift(ctx context.Context, in *Shift, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateDirectory(ctx context.Context, in *NewDirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Directory(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*DirectoryList, error) {
	out := new(DirectoryList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/Directory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAssociations(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*AssociationList, error) {
	out := new(AssociationList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetDirectoryEntry(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetDirectoryEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateDirectoryEntry(ctx context.Context, in *DirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateDirectoryEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListAdmins(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*Admins, error) {
	out := new(Admins)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListWorkers(ctx context.Context, in *WorkerListRequest, opts ...grpc.CallOption) (*Workers, error) {
	out := new(Workers)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListTimeZones(ctx context.Context, in *TimeZoneListRequest, opts ...grpc.CallOption) (*TimeZoneList, error) {
	out := new(TimeZoneList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/ListTimeZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GrowthGraph(ctx context.Context, in *GrowthGraphRequest, opts ...grpc.CallOption) (*GrowthGraphResponse, error) {
	out := new(GrowthGraphResponse)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GrowthGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerOf(ctx context.Context, in *WorkerOfRequest, opts ...grpc.CallOption) (*WorkerOfList, error) {
	out := new(WorkerOfList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdminOf(ctx context.Context, in *AdminOfRequest, opts ...grpc.CallOption) (*AdminOfList, error) {
	out := new(AdminOfList)
	err := c.cc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdminOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
type CompanyServiceServer interface {
	CreateCompany(context.Context, *CreateCompanyRequest) (*Company, error)
	ListCompanies(context.Context, *CompanyListRequest) (*CompanyList, error)
	GetCompany(context.Context, *GetCompanyRequest) (*Company, error)
	UpdateCompany(context.Context, *Company) (*Company, error)
	// teams
	CreateTeam(context.Context, *CreateTeamRequest) (*Team, error)
	ListTeams(context.Context, *TeamListRequest) (*TeamList, error)
	GetTeam(context.Context, *GetTeamRequest) (*Team, error)
	UpdateTeam(context.Context, *Team) (*Team, error)
	GetWorkerTeamInfo(context.Context, *Worker) (*Worker, error)
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	ListJobs(context.Context, *JobListRequest) (*JobList, error)
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	UpdateJob(context.Context, *Job) (*Job, error)
	CreateShift(context.Context, *CreateShiftRequest) (*Shift, error)
	ListShifts(context.Context, *ShiftListRequest) (*ShiftList, error)
	ListWorkerShifts(context.Context, *WorkerShiftListRequest) (*ShiftList, error)
	BulkPublishShifts(context.Context, *BulkPublishShiftsRequest) (*ShiftList, error)
	GetShift(context.Context, *GetShiftRequest) (*Shift, error)
	DeleteShift(context.Context, *GetShiftRequest) (*emptypb.Empty, error)
	UpdateShift(context.Context, *Shift) (*Shift, error)
	// Directory
	CreateDirectory(context.Context, *NewDirectoryEntry) (*DirectoryEntry, error)
	Directory(context.Context, *DirectoryListRequest) (*DirectoryList, error)
	GetAssociations(context.Context, *DirectoryListRequest) (*AssociationList, error)
	GetDirectoryEntry(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	UpdateDirectoryEntry(context.Context, *DirectoryEntry) (*DirectoryEntry, error)
	// Admins
	ListAdmins(context.Context, *AdminListRequest) (*Admins, error)
	CreateAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	GetAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	DeleteAdmin(context.Context, *DirectoryEntryRequest) (*emptypb.Empty, error)
	// Workers
	ListWorkers(context.Context, *WorkerListRequest) (*Workers, error)
	GetWorker(context.Context, *Worker) (*DirectoryEntry, error)
	DeleteWorker(context.Context, *Worker) (*emptypb.Empty, error)
	CreateWorker(context.Context, *Worker) (*DirectoryEntry, error)
	// timezones
	ListTimeZones(context.Context, *TimeZoneListRequest) (*TimeZoneList, error)
	// growth graph
	GrowthGraph(context.Context, *GrowthGraphRequest) (*GrowthGraphResponse, error)
	GetWorkerOf(context.Context, *WorkerOfRequest) (*WorkerOfList, error)
	GetAdminOf(context.Context, *AdminOfRequest) (*AdminOfList, error)
}

// UnimplementedCompanyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (*UnimplementedCompanyServiceServer) CreateCompany(context.Context, *CreateCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) ListCompanies(context.Context, *CompanyListRequest) (*CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanies not implemented")
}
func (*UnimplementedCompanyServiceServer) GetCompany(context.Context, *GetCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateCompany(context.Context, *Company) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateTeam(context.Context, *CreateTeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedCompanyServiceServer) ListTeams(context.Context, *TeamListRequest) (*TeamList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (*UnimplementedCompanyServiceServer) GetTeam(context.Context, *GetTeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateTeam(context.Context, *Team) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedCompanyServiceServer) GetWorkerTeamInfo(context.Context, *Worker) (*Worker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerTeamInfo not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateJob(context.Context, *CreateJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (*UnimplementedCompanyServiceServer) ListJobs(context.Context, *JobListRequest) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (*UnimplementedCompanyServiceServer) GetJob(context.Context, *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateJob(context.Context, *Job) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateShift(context.Context, *CreateShiftRequest) (*Shift, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShift not implemented")
}
func (*UnimplementedCompanyServiceServer) ListShifts(context.Context, *ShiftListRequest) (*ShiftList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShifts not implemented")
}
func (*UnimplementedCompanyServiceServer) ListWorkerShifts(context.Context, *WorkerShiftListRequest) (*ShiftList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkerShifts not implemented")
}
func (*UnimplementedCompanyServiceServer) BulkPublishShifts(context.Context, *BulkPublishShiftsRequest) (*ShiftList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkPublishShifts not implemented")
}
func (*UnimplementedCompanyServiceServer) GetShift(context.Context, *GetShiftRequest) (*Shift, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShift not implemented")
}
func (*UnimplementedCompanyServiceServer) DeleteShift(context.Context, *GetShiftRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShift not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateShift(context.Context, *Shift) (*Shift, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShift not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateDirectory(context.Context, *NewDirectoryEntry) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectory not implemented")
}
func (*UnimplementedCompanyServiceServer) Directory(context.Context, *DirectoryListRequest) (*DirectoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Directory not implemented")
}
func (*UnimplementedCompanyServiceServer) GetAssociations(context.Context, *DirectoryListRequest) (*AssociationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssociations not implemented")
}
func (*UnimplementedCompanyServiceServer) GetDirectoryEntry(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryEntry not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateDirectoryEntry(context.Context, *DirectoryEntry) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDirectoryEntry not implemented")
}
func (*UnimplementedCompanyServiceServer) ListAdmins(context.Context, *AdminListRequest) (*Admins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmins not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmin not implemented")
}
func (*UnimplementedCompanyServiceServer) GetAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (*UnimplementedCompanyServiceServer) DeleteAdmin(context.Context, *DirectoryEntryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmin not implemented")
}
func (*UnimplementedCompanyServiceServer) ListWorkers(context.Context, *WorkerListRequest) (*Workers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (*UnimplementedCompanyServiceServer) GetWorker(context.Context, *Worker) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (*UnimplementedCompanyServiceServer) DeleteWorker(context.Context, *Worker) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorker not implemented")
}
func (*UnimplementedCompanyServiceServer) CreateWorker(context.Context, *Worker) (*DirectoryEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorker not implemented")
}
func (*UnimplementedCompanyServiceServer) ListTimeZones(context.Context, *TimeZoneListRequest) (*TimeZoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeZones not implemented")
}
func (*UnimplementedCompanyServiceServer) GrowthGraph(context.Context, *GrowthGraphRequest) (*GrowthGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrowthGraph not implemented")
}
func (*UnimplementedCompanyServiceServer) GetWorkerOf(context.Context, *WorkerOfRequest) (*WorkerOfList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerOf not implemented")
}
func (*UnimplementedCompanyServiceServer) GetAdminOf(context.Context, *AdminOfRequest) (*AdminOfList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminOf not implemented")
}

func RegisterCompanyServiceServer(s *grpc.Server, srv CompanyServiceServer) {
	s.RegisterService(&_CompanyService_serviceDesc, srv)
}

func _CompanyService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListCompanies(ctx, req.(*CompanyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListTeams(ctx, req.(*TeamListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerTeamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerTeamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerTeamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerTeamInfo(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListJobs(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateShift(ctx, req.(*CreateShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShiftListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListShifts(ctx, req.(*ShiftListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListWorkerShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerShiftListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListWorkerShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListWorkerShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListWorkerShifts(ctx, req.(*WorkerShiftListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_BulkPublishShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPublishShiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).BulkPublishShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/BulkPublishShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).BulkPublishShifts(ctx, req.(*BulkPublishShiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetShift(ctx, req.(*GetShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteShift(ctx, req.(*GetShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateShift(ctx, req.(*Shift))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDirectoryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateDirectory(ctx, req.(*NewDirectoryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Directory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Directory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/Directory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Directory(ctx, req.(*DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAssociations(ctx, req.(*DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetDirectoryEntry(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateDirectoryEntry(ctx, req.(*DirectoryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListAdmins(ctx, req.(*AdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListWorkers(ctx, req.(*WorkerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListTimeZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeZoneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListTimeZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListTimeZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListTimeZones(ctx, req.(*TimeZoneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GrowthGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrowthGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GrowthGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GrowthGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GrowthGraph(ctx, req.(*GrowthGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerOf(ctx, req.(*WorkerOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdminOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdminOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdminOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdminOf(ctx, req.(*AdminOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "staffjoy.company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _CompanyService_CreateCompany_Handler,
		},
		{
			MethodName: "ListCompanies",
			Handler:    _CompanyService_ListCompanies_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyService_GetCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyService_UpdateCompany_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _CompanyService_CreateTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _CompanyService_ListTeams_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _CompanyService_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _CompanyService_UpdateTeam_Handler,
		},
		{
			MethodName: "GetWorkerTeamInfo",
			Handler:    _CompanyService_GetWorkerTeamInfo_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _CompanyService_CreateJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _CompanyService_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _CompanyService_GetJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _CompanyService_UpdateJob_Handler,
		},
		{
			MethodName: "CreateShift",
			Handler:    _CompanyService_CreateShift_Handler,
		},
		{
			MethodName: "ListShifts",
			Handler:    _CompanyService_ListShifts_Handler,
		},
		{
			MethodName: "ListWorkerShifts",
			Handler:    _CompanyService_ListWorkerShifts_Handler,
		},
		{
			MethodName: "BulkPublishShifts",
			Handler:    _CompanyService_BulkPublishShifts_Handler,
		},
		{
			MethodName: "GetShift",
			Handler:    _CompanyService_GetShift_Handler,
		},
		{
			MethodName: "DeleteShift",
			Handler:    _CompanyService_DeleteShift_Handler,
		},
		{
			MethodName: "UpdateShift",
			Handler:    _CompanyService_UpdateShift_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _CompanyService_CreateDirectory_Handler,
		},
		{
			MethodName: "Directory",
			Handler:    _CompanyService_Directory_Handler,
		},
		{
			MethodName: "GetAssociations",
			Handler:    _CompanyService_GetAssociations_Handler,
		},
		{
			MethodName: "GetDirectoryEntry",
			Handler:    _CompanyService_GetDirectoryEntry_Handler,
		},
		{
			MethodName: "UpdateDirectoryEntry",
			Handler:    _CompanyService_UpdateDirectoryEntry_Handler,
		},
		{
			MethodName: "ListAdmins",
			Handler:    _CompanyService_ListAdmins_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _CompanyService_CreateAdmin_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _CompanyService_GetAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _CompanyService_DeleteAdmin_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _CompanyService_ListWorkers_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _CompanyService_GetWorker_Handler,
		},
		{
			MethodName: "DeleteWorker",
			Handler:    _CompanyService_DeleteWorker_Handler,
		},
		{
			MethodName: "CreateWorker",
			Handler:    _CompanyService_CreateWorker_Handler,
		},
		{
			MethodName: "ListTimeZones",
			Handler:    _CompanyService_ListTimeZones_Handler,
		},
		{
			MethodName: "GrowthGraph",
			Handler:    _CompanyService_GrowthGraph_Handler,
		},
		{
			MethodName: "GetWorkerOf",
			Handler:    _CompanyService_GetWorkerOf_Handler,
		},
		{
			MethodName: "GetAdminOf",
			Handler:    _CompanyService_GetAdminOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}
